# Copyright 2006-2021 VMware, Inc.
# SPDX-License-Identifier: MIT
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube-config
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-configmap"
data:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube-copy-plugins
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-configmap"
data:
  copy_plugins.sh: |-
      #!/bin/bash
      for f in /opt/sonarqube/extensions/plugins/tmp/*.jar
      do
        file=${f##*/} && file=${file%-[0-9]*}
        for original in /opt/sonarqube/extensions/plugins/*.jar
        do
          originalfile=${original##*/} && originalfile=${originalfile%-[0-9]*}
          if [ "$originalfile" = "$file" ]; then
            rm -f "$original"
          fi
        done
      done
      cp /opt/sonarqube/extensions/plugins/tmp/*.jar /opt/sonarqube/extensions/plugins/
      /opt/sonarqube/bin/run.sh
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube-install-plugins
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-configmap"
data:
  install_plugins.sh: |-
    cd /opt/sonarqube/extensions/plugins/tmp
      echo "https://github.com/Cognifide/AEM-Rules-for-SonarQube/releases/download/v1.2/sonar-aemrules-plugin-1.2.jar" >> plugins.txt
      echo "https://github.com/dependency-check/dependency-check-sonar-plugin/releases/download/2.0.5/sonar-dependency-check-plugin-2.0.5.jar" >> plugins.txt
      echo "https://github.com/SonarSource/sonar-jacoco/releases/download/1.1.0.898/sonar-jacoco-plugin-1.1.0.898.jar" >> plugins.txt
      echo "https://github.com/SonarSource/sonar-java/releases/download/6.5.0.22421/sonar-java-plugin-6.5.0.22421.jar" >> plugins.txt

      cat plugins.txt | xargs -n 1 -P 8 wget --no-check-certificate
      rm plugins.txt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-deployment"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarqube
      release: sonarqube
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarqube
        release: sonarqube
    spec:
      serviceAccountName: {{ tanzu_app_pipeline.code_analyzer.resource_name }}
      securityContext:
        fsGroup: 999
      initContainers:
        - name: chmod-volume-mounts
          image: "{{ tanzu_app_pipeline.code_analyzer.init_image }}:{{ tanzu_app_pipeline.code_analyzer.init_image_tag }}"
          command:
            - "sh"
            - "-c"
            - 'mkdir -p $(printf "/opt/sonarqube/${1-%s\n}" temp logs data extensions/downloads extensions/plugins/tmp extensions/plugins certs) &&
               chown 999:999 -R $(printf "/opt/sonarqube/${1-%s\n}" temp logs data extensions/downloads extensions/plugins/tmp extensions/plugins certs)'
          volumeMounts:
            - mountPath: /opt/sonarqube/temp
              name: sonarqube
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: sonarqube
              subPath: logs
            - mountPath: /opt/sonarqube/data
              name: sonarqube
              subPath: data
            - mountPath: /opt/sonarqube/extensions/plugins/tmp
              name: sonarqube
              subPath: tmp
            - mountPath: /opt/sonarqube/extensions/downloads
              name: sonarqube
              subPath: downloads
            - mountPath: /opt/sonarqube/extensions/plugins
              name: sonarqube
              subPath: plugins
          resources: {{ tanzu_app_pipeline.default_resources }}
        - name: init-sysctl
          image: "{{ tanzu_app_pipeline.code_analyzer.init_image }}:{{ tanzu_app_pipeline.code_analyzer.init_image_tag }}"
          securityContext:
            privileged: true
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          resources: {{ tanzu_app_pipeline.default_resources }}
        - name: install-plugins
          image: "{{ tanzu_app_pipeline.code_analyzer.init_image }}:{{ tanzu_app_pipeline.code_analyzer.init_image_tag }}"
          command: ["sh",
            "-c",
            "mkdir -p /opt/sonarqube/extensions/plugins/tmp &&
            rm -f /opt/sonarqube/extensions/plugins/tmp/* &&
            cp /tmp/scripts/install_plugins.sh /opt/sonarqube/extensions/plugins/tmp/install_plugins.sh &&
            chmod 0775 /opt/sonarqube/extensions/plugins/tmp/install_plugins.sh &&
            /opt/sonarqube/extensions/plugins/tmp/install_plugins.sh && pwd && ls -lah"]
          volumeMounts:
            - mountPath: /opt/sonarqube/extensions/plugins/tmp
              name: sonarqube
              subPath: tmp
            - name: install-plugins
              mountPath: /tmp/scripts/
          resources: {{ tanzu_app_pipeline.default_resources }}
      containers:
        - name: sonarqube
          image: "{{ tanzu_app_pipeline.code_analyzer.image }}:{{ tanzu_app_pipeline.code_analyzer.image_tag }}"
          imagePullPolicy:
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          command:
            - /tmp/scripts/copy_plugins.sh
          env:
            - name: SONARQUBE_WEB_JVM_OPTS
              value: ""
            - name: SONARQUBE_JDBC_USERNAME
              value: "sonarUser"
            - name: SONARQUBE_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-postgresql
                  key: postgresql-password
            - name: SONARQUBE_JDBC_URL
              value: "jdbc:postgresql://{{ tanzu_app_pipeline.code_analyzer.resource_name }}-postgresql:5432/sonarDB"
          livenessProbe:
            httpGet:
              path: /sessions/new
              port: http
            initialDelaySeconds: 60
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /sessions/new
              port: http
            initialDelaySeconds: 60
            periodSeconds: 60
            failureThreshold: 6
          volumeMounts:
            - mountPath: /opt/sonarqube/data
              name: sonarqube
              subPath: data
            - mountPath: /opt/sonarqube/extensions/plugins/tmp
              name: sonarqube
              subPath: tmp
            - mountPath: /opt/sonarqube/extensions/downloads
              name: sonarqube
              subPath: downloads
            - mountPath: /opt/sonarqube/extensions/plugins
              name: sonarqube
              subPath: plugins
            - mountPath: /opt/sonarqube/temp
              name: sonarqube
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: sonarqube
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
            - name: copy-plugins
              mountPath: /tmp/scripts
          resources: {{ tanzu_app_pipeline.code_analyzer.resources }}
      volumes:
        - name: install-plugins
          configMap:
            name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube-install-plugins
            items:
              - key: install_plugins.sh
                path: install_plugins.sh
        - name: copy-plugins
          configMap:
            name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube-copy-plugins
            defaultMode: 0755
            items:
              - key: copy_plugins.sh
                path: copy_plugins.sh
        - name: sonarqube
          emptyDir: {}
        - name : tmp-dir
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-svc"
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sonarqube
    release: sonarqube
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app: sonarqube
    release: sonarqube
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-sonarqube-ingress"
  annotations:
    external-dns.alpha.kubernetes.io/target: "{{ tanzu_ingress.dns }}"
spec:
  rules:
    - host: {{ tanzu_app_pipeline.code_analyzer.dns }}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube
              servicePort: 9000
          - path: /*
            backend:
              serviceName: {{ tanzu_app_pipeline.code_analyzer.resource_name }}-sonarqube
              servicePort: 9000
