# Copyright 2006-2021 VMware, Inc.
# SPDX-License-Identifier: MIT
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-sa"
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}-schedule-agents
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-role"
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "pods/exec", "persistentvolumeclaims"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}-casc-reload
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-role"
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}-schedule-agents
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-role"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ tanzu_app_pipeline.ci.resource_name }}-schedule-agents
subjects:
  - kind: ServiceAccount
    name: {{ tanzu_app_pipeline.ci.resource_name }}
    namespace: {{ tanzu_app_pipeline.namespace }}
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}-watch-configmaps
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-role"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ tanzu_app_pipeline.ci.resource_name }}-casc-reload
subjects:
  - kind: ServiceAccount
    name: {{ tanzu_app_pipeline.ci.resource_name }}
    namespace: {{ tanzu_app_pipeline.namespace }}
apiVersion: v1
---
kind: Secret
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": jenkins
    "app.kubernetes.io/instance": jenkins
    "app.kubernetes.io/component": jenkins-master
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-secret"
type: Opaque
stringData:
  jenkins-admin-password: "{{ tanzu_app_pipeline.ci.password }}"
  jenkins-admin-user: "{{ tanzu_app_pipeline.ci.username }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: jenkins
    app.kubernetes.io/instance: jenkins
    app.kubernetes.io/component: jenkins-master
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-configmap"
data:
  apply_config.sh: |-
    echo "applying Jenkins configuration"
    mkdir -p /usr/share/jenkins/ref/secrets/;
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    kubernetes:1.25.7
    workflow-job:2.39
    workflow-aggregator:2.6
    credentials-binding:1.23
    git:4.2.2
    configuration-as-code:1.41
    job-dsl:1.77
    blueocean:1.23.2
    conditional-buildstep:1.3.1
    parameterized-trigger:2.37
    pipeline-utility-steps:2.6.1
    pipeline-stage-step:2.5
    nexus-artifact-uploader:2.13
    authentication-tokens:1.4
    dependency-check-jenkins-plugin:5.1.1
    kubernetes-cli:1.8.3
    sonar:2.11
    sonar-quality-gates:1.3.1
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/instance: "jenkins"
    app.kubernetes.io/component: "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-pvc"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/component: "jenkins-master"
    app.kubernetes.io/instance: "jenkins"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-deployment"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: 'jenkins'
      app.kubernetes.io/component: "jenkins-master"
      app.kubernetes.io/instance: "jenkins"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: 'jenkins'
        app.kubernetes.io/component: "jenkins-master"
        app.kubernetes.io/instance: "jenkins"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: "jenkins"
      initContainers:
        - name: "copy-default-config"
          image: "{{ tanzu_app_pipeline.ci.image }}:{{ tanzu_app_pipeline.ci.image_tag }}"
          imagePullPolicy: "Always"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ tanzu_app_pipeline.ci.resource_name }}
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ tanzu_app_pipeline.ci.resource_name }}
                  key: jenkins-admin-user
          resources: {{ tanzu_app_pipeline.ci.init_resources }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
      containers:
        - name: jenkins
          image: "{{ tanzu_app_pipeline.ci.image }}:{{ tanzu_app_pipeline.ci.image_tag }}"
          imagePullPolicy: "IfNotPresent"
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin", "--httpPort=8080"]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >

                 -Dcasc.reload.token=$(POD_NAME)
            - name: JENKINS_OPTS
              value: ""
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jenkins
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jenkins
                  key: jenkins-admin-user
            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: slavelistener
          livenessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources: {{ tanzu_app_pipeline.ci.resources }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: /var/jenkins_home/casc_configs
        - name: jenkins-sc-config
          image: "{{ tanzu_app_pipeline.ci.sidecar_image }}:{{ tanzu_app_pipeline.ci.sidecar_image_tag }}"
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: "tanzu-app-pipeline"
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
          resources: {{ tanzu_app_pipeline.default_resources }}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home
      volumes:
        - name: plugins
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: jenkins-config
          configMap:
            name: {{ tanzu_app_pipeline.ci.resource_name }}
        - name: secrets-dir
          emptyDir: {}
        - name: plugin-dir
          emptyDir: {}
        - name: jenkins-home
          persistentVolumeClaim:
            claimName: jenkins
        - name: sc-config-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}-agent
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/component: "jenkins-master"
    app.kubernetes.io/instance: "jenkins"
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-svc"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      name: slavelistener
  selector:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/component: "jenkins-master"
    app.kubernetes.io/instance: "jenkins"
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/component: "jenkins-master"
    app.kubernetes.io/instance: "jenkins"
    rpk.heritage: "true"
    rpk.module: "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-svc"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    app.kubernetes.io/name: 'jenkins'
    app.kubernetes.io/component: "jenkins-master"
    app.kubernetes.io/instance: "jenkins"
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ tanzu_app_pipeline.ci.resource_name }}
  namespace: {{ tanzu_app_pipeline.namespace }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-master"
    rpk.heritage: "true"
    rpk.module : "{{ tanzu_app_pipeline.module }}"
    rpk.resource: "pipeline-jenkins-ingress"
  annotations:
    external-dns.alpha.kubernetes.io/target: "{{ tanzu_ingress.dns }}"
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: {{ tanzu_app_pipeline.ci.resource_name }}
              servicePort: 8080
      host: "{{ tanzu_app_pipeline.ci.dns }}"
